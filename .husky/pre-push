set -e

cd "$(git rev-parse --show-toplevel)"

while read local_ref local_sha remote_ref remote_sha; do
  # Skip deletes
  if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
    range="$local_sha"
  else
    range="$remote_sha..$local_sha"
  fi

  changed_files=$(git diff-tree --name-only -r $range)

  if echo "$changed_files" | grep -q '^frontend/'; then
    echo "üõ†Ô∏è- Changes in frontend. Running frontend tests..."
    cd frontend
    npx jest --bail --passWithNoTests
    cd - >/dev/null
    echo "‚úÖ- Frontend tests passed"
  fi

  if echo "$changed_files" | grep -q '^backend/'; then
    echo "üõ†Ô∏è- Changes in backend. Running backend tests..."
    cd backend
    uv run pytest --exitfirst --disable-warnings || [ $? -eq 5 ]
    cd - >/dev/null
    echo "‚úÖ- Backend tests passed"
  fi

  if echo "$changed_files" | grep -qE '^backend/app/models/|^backend/alembic/versions/'; then
    echo "üõ†Ô∏è- Changes in models and/or migrations. Running migration checks..."
    
    ROOT="$(git rev-parse --show-toplevel)"
    BASE="$ROOT/docker-compose.yml"
    CI="$ROOT/.husky/docker-compose.ci.yml"
    COMPOSE="docker compose -f $BASE -f $CI"
    $COMPOSE up -d --remove-orphans db

    for i in {1..10}; do
      state=$($COMPOSE ps --format '{{.Health}}' db)
      [[ "$state" == "healthy" ]] && { break; }
      [[ $i -eq 10 ]] && { echo "‚ùå- DB not healthy in time"; exit 1; }
      sleep 1
    done

    CID=$($COMPOSE run --build --no-deps -d test-migrations | tail -n1)
    docker logs -f "$CID" &
    EXIT=$(docker wait "$CID")

    $COMPOSE stop test-migrations >/dev/null 2>&1 || true
    $COMPOSE rm -f test-migrations >/dev/null 2>&1 || true

    if [[ "$EXIT" -eq 0 ]]; then
      echo "‚úÖ- Migration checks passed"
    else
      echo "‚ùå- Migration checks failed"
      exit 1
    fi
  fi
done

exit 1