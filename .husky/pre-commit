set -euo pipefail

ROOT="$(git rev-parse --show-toplevel)"
BASE="$ROOT/docker-compose.yml"
CI="$ROOT/.husky/docker-compose.ci.yml"
COMPOSE="docker compose -f $BASE -f $CI"

echo "üßπ  Frontend lint-staged‚Ä¶"
pushd "$ROOT/frontend" >/dev/null
npx lint-staged
popd >/dev/null

echo "üßπ  Backend pre-commit hooks‚Ä¶"
pushd "$ROOT/backend" >/dev/null
uv run pre-commit run --config .pre-commit-config.yaml --hook-stage pre-commit
popd >/dev/null

echo "‚úÖ  Linting and formatting checks passed"

git diff --cached --name-only | grep -qE "(models\.py|models/|alembic/versions/)" || {
  echo "‚ÑπÔ∏è  No DB-relevant changes ‚Äî skipping migration checks"; exit 0; }

echo "üóÉÔ∏è  Migration & model checks‚Ä¶"

$COMPOSE up -d --remove-orphans db

for i in {1..10}; do
  state=$($COMPOSE ps --format '{{.Health}}' db)
  [[ "$state" == "healthy" ]] && { echo "‚úÖ  DB healthy"; break; }
  [[ $i -eq 10 ]] && { echo "‚ùå  DB not healthy in time"; exit 1; }
  echo "‚è≥  Waiting for DB ($i/10)‚Ä¶"; sleep 1
done

echo "üöÄ  Running test-migrations‚Ä¶"
CID=$($COMPOSE run --build --no-deps -d test-migrations | tail -n1)

EXIT=$(docker wait "$CID")
docker logs "$CID"

echo "üßπ  Cleaning up test-migrations container‚Ä¶"
$COMPOSE stop   test-migrations >/dev/null 2>&1 || true
$COMPOSE rm -f  test-migrations >/dev/null 2>&1 || true

if [[ "$EXIT" -eq 0 ]]; then
  echo "‚úÖ  Migration & model checks passed"
else
  echo "‚ùå  Migration checks failed (exit $EXIT)"
  exit 1
fi
