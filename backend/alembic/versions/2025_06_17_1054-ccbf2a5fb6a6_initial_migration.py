"""initial migration

Revision ID: ccbf2a5fb6a6
Revises:
Create Date: 2025-06-17 10:54:37.637507

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
import sqlmodel
from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'ccbf2a5fb6a6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'admindashboardstats',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('total_trainings', sa.Integer(), nullable=False),
        sa.Column('average_score', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'appconfig',
        sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('type', sa.Enum('int', 'string', 'boolean', name='configtype'), nullable=True),
        sa.PrimaryKeyConstraint('key'),
    )
    op.create_table(
        'conversationcategory',
        sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('system_prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('initial_prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('ai_setup', sa.JSON(), nullable=True),
        sa.Column('default_context', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('default_goal', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('default_other_party', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('is_custom', sa.Boolean(), nullable=False),
        sa.Column('language_code', sa.Enum('en', 'de', name='languagecode'), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    op.create_table(
        'hr_information',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('embedding', Vector(dim=768), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'userprofile',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(length=15), nullable=False),
        sa.Column(
            'preferred_language_code', sa.Enum('en', 'de', name='languagecode'), nullable=False
        ),
        sa.Column(
            'experience',
            sa.Enum('beginner', 'intermediate', 'skilled', 'advanced', 'expert', name='experience'),
            nullable=False,
        ),
        sa.Column(
            'preferred_learning_style',
            sa.Enum('visual', 'auditory', 'kinesthetic', name='preferredlearningstyle'),
            nullable=False,
        ),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('store_conversations', sa.Boolean(), nullable=False),
        sa.Column('account_role', sa.Enum('user', 'admin', name='accountrole'), nullable=False),
        sa.Column(
            'professional_role',
            sa.Enum(
                'hr_professional', 'team_leader', 'executive', 'other', name='professionalrole'
            ),
            nullable=False,
        ),
        sa.Column('total_sessions', sa.Integer(), nullable=False),
        sa.Column('training_time', sa.Float(), nullable=False),
        sa.Column('current_streak_days', sa.Integer(), nullable=False),
        sa.Column('average_score', sa.Integer(), nullable=False),
        sa.Column('goals_achieved', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('phone_number'),
    )
    op.create_table(
        'conversationscenario',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('category_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('custom_category_label', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('language_code', sa.Enum('en', 'de', name='languagecode'), nullable=False),
        sa.Column('context', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('goal', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('other_party', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            'difficulty_level',
            sa.Enum('easy', 'medium', 'hard', name='difficultylevel'),
            nullable=False,
        ),
        sa.Column('tone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('complexity', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            'status',
            sa.Enum('draft', 'ready', 'archived', name='conversationscenariostatus'),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['category_id'], ['conversationcategory.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['userprofile.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'userconfidencescore',
        sa.Column(
            'confidence_area',
            sa.Enum(
                'giving_difficult_feedback',
                'managing_team_conflicts',
                'leading_challenging_conversations',
                name='confidencearea',
            ),
            nullable=False,
        ),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('score', sa.Integer(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['userprofile.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('confidence_area', 'user_id'),
    )
    op.create_table(
        'usergoal',
        sa.Column(
            'goal',
            sa.Enum(
                'giving_constructive_feedback',
                'managing_team_conflicts',
                'performance_reviews',
                'motivating_team_members',
                'leading_difficult_conversations',
                'communicating_organizational_change',
                'develop_emotional_intelligence',
                'building_inclusive_teams',
                'negotiation_skills',
                'coaching_mentoring',
                name='goal',
            ),
            nullable=False,
        ),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['userprofile.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('goal', 'user_id'),
    )
    op.create_table(
        'scenariopreparation',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('scenario_id', sa.Uuid(), nullable=False),
        sa.Column('objectives', sa.JSON(), nullable=True),
        sa.Column('key_concepts', sa.JSON(), nullable=True),
        sa.Column('prep_checklist', sa.JSON(), nullable=True),
        sa.Column(
            'status',
            sa.Enum('pending', 'completed', 'failed', name='scenariopreparationstatus'),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['scenario_id'], ['conversationscenario.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'session',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('scenario_id', sa.Uuid(), nullable=False),
        sa.Column('scheduled_at', sa.DateTime(), nullable=True),
        sa.Column('started_at', sa.DateTime(), nullable=True),
        sa.Column('ended_at', sa.DateTime(), nullable=True),
        sa.Column('ai_persona', sa.JSON(), nullable=True),
        sa.Column(
            'status',
            sa.Enum('started', 'completed', 'failed', name='sessionstatus'),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['scenario_id'], ['conversationscenario.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'rating',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('session_id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('score', sa.Integer(), nullable=False),
        sa.Column('comment', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['session_id'], ['session.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['userprofile.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'review',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('session_id', sa.Uuid(), nullable=True),
        sa.Column('rating', sa.Integer(), nullable=False),
        sa.Column('comment', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['session_id'], ['session.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['userprofile.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'sessionfeedback',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('session_id', sa.Uuid(), nullable=False),
        sa.Column('scores', sa.JSON(), nullable=True),
        sa.Column('tone_analysis', sa.JSON(), nullable=True),
        sa.Column('overall_score', sa.Integer(), nullable=False),
        sa.Column('transcript_uri', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('speak_time_percent', sa.Float(), nullable=False),
        sa.Column('questions_asked', sa.Integer(), nullable=False),
        sa.Column('session_length_s', sa.Integer(), nullable=False),
        sa.Column('goals_achieved', sa.JSON(), nullable=True),
        sa.Column('example_positive', sa.JSON(), nullable=True),
        sa.Column('example_negative', sa.JSON(), nullable=True),
        sa.Column('recommendations', sa.JSON(), nullable=True),
        sa.Column(
            'status',
            sa.Enum('pending', 'completed', 'failed', name='feedbackstatusenum'),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['session_id'], ['session.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'sessionturn',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('session_id', sa.Uuid(), nullable=False),
        sa.Column('speaker', sa.Enum('user', 'assistant', name='speakerenum'), nullable=False),
        sa.Column('start_offset_ms', sa.Integer(), nullable=False),
        sa.Column('end_offset_ms', sa.Integer(), nullable=False),
        sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('audio_uri', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('ai_emotion', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['session_id'], ['session.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sessionturn')
    op.drop_table('sessionfeedback')
    op.drop_table('review')
    op.drop_table('rating')
    op.drop_table('session')
    op.drop_table('scenariopreparation')
    op.drop_table('usergoal')
    op.drop_table('userconfidencescore')
    op.drop_table('conversationscenario')
    op.drop_table('userprofile')
    op.drop_table('hr_information')
    op.drop_table('conversationcategory')
    op.drop_table('appconfig')
    op.drop_table('admindashboardstats')
    # ### end Alembic commands ###
    op.execute('DROP TYPE IF EXISTS configtype CASCADE')
    op.execute('DROP TYPE IF EXISTS languagecode CASCADE')
    op.execute('DROP TYPE IF EXISTS experience CASCADE')
    op.execute('DROP TYPE IF EXISTS preferredlearningstyle CASCADE')
    op.execute('DROP TYPE IF EXISTS accountrole CASCADE')
    op.execute('DROP TYPE IF EXISTS professionalrole CASCADE')
    op.execute('DROP TYPE IF EXISTS difficultylevel CASCADE')
    op.execute('DROP TYPE IF EXISTS conversationscenariostatus CASCADE')
    op.execute('DROP TYPE IF EXISTS confidencearea CASCADE')
    op.execute('DROP TYPE IF EXISTS goal CASCADE')
    op.execute('DROP TYPE IF EXISTS scenariopreparationstatus CASCADE')
    op.execute('DROP TYPE IF EXISTS sessionstatus CASCADE')
    op.execute('DROP TYPE IF EXISTS feedbackstatusenum CASCADE')
    op.execute('DROP TYPE IF EXISTS speakerenum CASCADE')

    op.execute('DROP EXTENSION IF EXISTS vector CASCADE')


# TEST
