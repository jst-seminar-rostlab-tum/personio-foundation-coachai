[project]
name = "coachAI-backend"
version = "0.1.0"
description = "A smart, voice-based training app for HR professionals to master difficult conversations through guided preparation, realistic simulations, and actionable feedback"
readme = "README.md"
requires-python = "==3.12.7"
dependencies = [
  "fastapi[standard]>=0.112.1",
  "sqlalchemy>=2.0.22",
  "pydantic>=2.4.2",
  "pydantic-settings>=2.0.3",
  "psycopg[binary]>=3.2.0",
  "alembic>=1.12.0",
  "python-jose>=3.3.0",
  "passlib>=1.7.4",
  "python-multipart>=0.0.6",
  "email-validator>=2.0.0",
  "pre-commit>=4.2.0",
  "sqlmodel>=0.0.24",
  "twilio>=8.12.0",
  "python-dotenv>=1.0.0",
  "psycopg2-binary>=2.9.10",
  "openai>=1.81.0",
  "langchain>=0.3.25",
  "langchain-community>0.3.20",
  "langchain-google-genai>=2.0.10",
  "google-generativeai>=0.8.5",
  "supabase>=2.15.2",
  "pypdf>=5.4.0",
  "pgvector>=0.2.5,<0.4",
  "langchain-huggingface>=0.2.0",
  "langchain-postgres>=0.0.14",
]

[tool.setuptools]
packages = [
  "rag",
  "data",
  "models",
  "routers",
  "schemas",
  "services",
  "connections",
]


[dependency-groups]
dev = [
  "ruff>=0.11.9",
  "pre-commit>=4.2.0",
  "pytest",
  "pytest-asyncio",
  "pytest-postgresql",
  "httpx",
  "respx",
]

lint = ["ruff"]

[tool.ruff]
# Enable all rules by default
select = ["ALL"]
# Ignore specific rules
ignore = [
    "E501",  # Line too long
    "D",     # Documentation
    "ANN",   # Type annotations
    "FBT",   # Boolean trap
    "ERA",   # Commented out code
    "PLR",   # Too many arguments
    "RUF",   # Ruff-specific rules
]

# Enforce camelCase naming
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py

[tool.ruff.naming]
# Enforce camelCase for variables and functions
variable-name = "camelCase"
function-name = "camelCase"
# Keep snake_case for class names (Python convention)
class-name = "snake_case"

# Configure Ruff to check all Python files in the backend directory
[tool.ruff.target-version]
python = "3.12"

[tool.ruff.lint]
# Check all Python files in the backend directory
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]

[tool.ruff.format]
# Format all Python files in the backend directory
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]

# Add specific naming rules
[tool.ruff.lint.naming]
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
# Function naming rules
function-name = "camelCase"
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
# Variable naming rules
variable-name = "camelCase"
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
# Class naming rules (keep snake_case for Python convention)
class-name = "snake_case"
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
# Method naming rules
method-name = "camelCase"
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
# Module naming rules
module-name = "snake_case"
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
# Constant naming rules
constant-name = "UPPER_CASE"
include = ["**/*.py"]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "__init__.py",
    "build",
    "dist",
]
