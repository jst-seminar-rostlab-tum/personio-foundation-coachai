services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jspracticalcourse-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks: [ip6net]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        stage: dev
    container_name: jspracticalcourse-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/src/backend
      - /app/.venv
    env_file: [.env]
    environment:
      STAGE: dev
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_db
      POSTGRES_PORT: 5432
    depends_on:
      - db
    networks:
      - app-network
    command: uv run fastapi dev --host 0.0.0.0 --port 8000 --reload

  init-db:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        stage: dev
    depends_on:
      - db
    volumes:
      - ./backend:/app
      - /app/.venv
    environment:
      STAGE: dev
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_db
      POSTGRES_PORT: 5432
    entrypoint: ["uv", "run", "-m", "app.data.populate_dummy_data"]
    networks:
      - app-network
  db:
    image: pgvector/pgvector:pg17
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_db
    networks:
      - app-network

networks:
  ip6net:
    external: true