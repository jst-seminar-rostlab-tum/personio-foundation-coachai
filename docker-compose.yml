services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        stage: dev
    command: >
      sh -c "
        until pg_isready -h host.docker.internal -p 54322 -U postgres; do
          echo '⏳ waiting for database…'; sleep 2;
        done;
        uv run fastapi dev --host 0.0.0.0 --port 8000 --reload
      "
    volumes:
      - ./backend:/app
      - /app/.venv
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      STAGE: dev
      DEV_MODE_SKIP_AUTH: ${DEV_MODE_SKIP_AUTH:-True}
      DEV_MODE_MOCK_USER_ID: ${DEV_MODE_MOCK_USER_ID:-763c76f3-e5a4-479c-8b53-e3418d5e2ef5}
      DATABASE_URL: postgresql://postgres:postgres@host.docker.internal:54322/postgres
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 54322
    depends_on:
      supabase:
        condition: service_healthy
    networks:
      - app-network

  init-db:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        stage: dev
    entrypoint: [ "uv", "run", "-m", "app.data.populate_dummy_data" ]
    volumes:
      - ./backend:/app
      - /app/.venv
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      STAGE: dev
      DATABASE_URL: postgresql://postgres:postgres@host.docker.internal:54322/postgres
    depends_on:
      supabase:
        condition: service_healthy
    networks:
      - app-network

  supabase:
    image: node:20
    working_dir: /app/supabase
    network_mode: host # Has to run on host
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /app/supabase/node_modules
    environment:
      SUPABASE_API_HOST: 0.0.0.0
    command: >
      sh -c "
        npm install &&
        npx supabase start --debug &&
        tail -f /dev/null
      "
    healthcheck:
      test: [ "CMD-SHELL", "curl -sf http://127.0.0.1:54321/rest-admin/v1/ready || exit 1" ]
      interval: 3s
      timeout: 3s
      retries: 10


networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
