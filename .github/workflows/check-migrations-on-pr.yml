name: Check database migrations

on:
  pull_request:

jobs:
  # ─────────────────────────────────────────────────────────────
  # Pre-migration static checks (unchanged)
  # ─────────────────────────────────────────────────────────────
  pre-checks:
    name: Pre-migration checks
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for backend changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      - name: Check if dev branch is merged
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          git fetch origin dev
          git fetch origin "$PR_BRANCH"
          echo "Checking if origin/dev is merged into $PR_BRANCH"
          if git merge-base --is-ancestor origin/dev origin/"$PR_BRANCH"; then
            echo "✅ Dev branch is merged"
          else
            echo "❌ Dev branch is not fully merged into this branch"
            echo "Please merge dev branch before proceeding"
            exit 1
          fi

      - name: Check for modified dev migration files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Checking for modifications to existing migration files from dev..."
          DEV_MIGRATIONS=$(git ls-tree -r --name-only origin/dev -- backend/alembic/versions/ backend/alembic/data/ | grep -E '\.py$|\.sql$' || true)
          if [[ -n "$DEV_MIGRATIONS" ]]; then
            echo "$DEV_MIGRATIONS"
            MODIFIED=""
            for f in $DEV_MIGRATIONS; do
              if git ls-tree -r --name-only HEAD -- "$f" | grep -q .; then
                if ! git diff --quiet origin/dev HEAD -- "$f"; then
                  MODIFIED="$MODIFIED\n$f (modified)"
                fi
              else
                MODIFIED="$MODIFIED\n$f (deleted)"
              fi
            done
            if [[ -n "$MODIFIED" ]]; then
              echo "❌ Existing migration files from dev have been altered:"
              echo -e "$MODIFIED"
              exit 1
            fi
          fi
          echo "✅ Migration files check passed"

      - name: No relevant changes, skipping migration pre-checks
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No relevant changes, skipping migration pre-checks."

  # ─────────────────────────────────────────────────────────────
  # Main job: spin up Supabase Postgres, run Alembic migrations
  # ─────────────────────────────────────────────────────────────
  migrations:
    name: Check migrations
    runs-on: ubuntu-22.04
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4

      - name: Check for backend changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      - name: Install uv
        if: steps.changed-files.outputs.any_changed == 'true'
        run: pipx install uv

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: uv sync
        working-directory: ./backend

      # Spin up a *fresh* Supabase Postgres 17 cluster every time
      - name: Start database (Supabase Postgres 17 OrioleDB)
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          docker compose \
            -f docker-compose.yml \
            -f .husky/docker-compose.ci.yml \
            up -d --remove-orphans --force-recreate --renew-anon-volumes db

      - name: Wait for database startup
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Waiting for database to be healthy..."
          for i in {1..60}; do
            state=$(docker compose -f docker-compose.yml -f .husky/docker-compose.ci.yml ps --format '{{.Health}}' db)
            if [[ "$state" == "healthy" ]]; then
              echo "✅ Database ready after $((i*2)) seconds"
              break
            elif [[ "$state" == "starting" ]]; then
              echo "Database starting... ($((i*2))s elapsed)"
            fi
            [[ $i -eq 60 ]] && { echo "❌ Database not healthy after 2 minutes"; exit 1; }
            sleep 2
          done

      # Ensure OrioleDB extension exists (idempotent)
      - name: Enable OrioleDB extension
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          docker compose -f docker-compose.yml -f .husky/docker-compose.ci.yml \
            exec db psql -U postgres -c "CREATE EXTENSION IF NOT EXISTS orioledb;"

      - name: Run migrations
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          CID=$(docker compose \
            -f docker-compose.yml \
            -f .husky/docker-compose.ci.yml \
            run --build --no-deps -d test-migrations | tail -n1)
          docker logs -f "$CID"
          EXIT=$(docker wait "$CID")
          if [[ "$EXIT" -eq 0 ]]; then
            echo "✅ Migration checks passed"
          else
            echo "❌ Migration checks failed"
            exit 1
          fi

      - name: No relevant changes, skipping migration checks
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No relevant changes, skipping migration checks."
