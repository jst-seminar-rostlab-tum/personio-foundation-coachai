name: Check Migrations on PR

on:
  pull_request:

jobs:
  pre-checks:
    name: Pre-migration checks
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for backend changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      - name: Check if dev branch is merged
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          git fetch origin dev
          git fetch origin $PR_BRANCH
          echo "Checking if origin/dev is merged into $PR_BRANCH"

          if git merge-base --is-ancestor origin/dev origin/$PR_BRANCH; then
            echo "✅ Dev branch is merged"
          else
            echo "❌ Dev branch is not fully merged into this branch"
            echo "Please merge dev branch before proceeding"
            exit 1
          fi

      - name: Check for modified dev migration files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Checking for modifications to existing migration files from dev..."

          # Get list of migration files that exist on dev branch
          DEV_MIGRATIONS=$(git ls-tree -r --name-only origin/dev -- backend/alembic/versions/ backend/alembic/data/ | grep -E '\.py$|\.sql$' || true)

          if [[ -n "$DEV_MIGRATIONS" ]]; then
            echo "Migration files found on dev branch:"
            echo "$DEV_MIGRATIONS"

            MODIFIED_FILES=""
            for file in $DEV_MIGRATIONS; do
              # Does the file exist in this PR branch?
              if git ls-tree -r --name-only HEAD -- "$file" | grep -q .; then
                # File exists; check if modified
                if ! git diff --quiet origin/dev HEAD -- "$file"; then
                  MODIFIED_FILES="$MODIFIED_FILES\n$file (modified)"
                fi
              else
                # File is missing in PR branch (i.e. deleted)
                MODIFIED_FILES="$MODIFIED_FILES\n$file (deleted)"
              fi
            done

            if [[ -n "$MODIFIED_FILES" ]]; then
              echo "❌ Existing migration files from dev have been altered:"
              echo -e "$MODIFIED_FILES"
              echo ""
              echo "Migration files from dev branch should never be modified or deleted."
              echo "Revert changes and create new migration files instead."
              exit 1
            else
              echo "✅ No existing migration files from dev have been modified"
            fi
          else
            echo "✅ No migration files found on dev branch"
          fi

      - name: No relevant changes, skipping migration pre-checks
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No relevant changes, skipping migration pre-checks."

  migrations:
    name: Check migrations
    runs-on: ubuntu-22.04
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4

      - name: Check for backend changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      - name: Install uv
        if: steps.changed-files.outputs.any_changed == 'true'
        run: pipx install uv

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: uv sync
        working-directory: ./backend

      - name: Start Supabase stack
        if: steps.changed-files.outputs.any_changed == 'true'
        run: docker compose -f docker-compose.yml -f .husky/docker-compose.ci.yml up -d --remove-orphans supabase

      - name: Diagnostics before Supabase healthcheck
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "==== Docker ps output ===="
          docker ps -a
          echo "==== Docker network ls ===="
          docker network ls
          echo "==== Docker inspect supabase container (if running) ===="
          SUPABASE_CID=$(docker ps -qf "name=supabase")
          if [ -n "$SUPABASE_CID" ]; then
            docker inspect $SUPABASE_CID
          else
            echo "Supabase container not running yet."
          fi
          echo "==== List open ports on host ===="
          netstat -tuln || ss -tuln || echo "netstat/ss not available"
          echo "==== Try curl to localhost:54321 from host ===="
          curl -v http://localhost:54321/rest-admin/v1/ready || echo "curl to localhost:54321 failed"
          echo "==== Try curl to 127.0.0.1:54321 from host ===="
          curl -v http://127.0.0.1:54321/rest-admin/v1/ready || echo "curl to 127.0.0.1:54321 failed"
          echo "==== Try curl to supabase:54321 from test-migrations container ===="
          docker compose -f docker-compose.yml -f .husky/docker-compose.ci.yml run --rm test-migrations curl -v http://supabase:54321/rest-admin/v1/ready || echo "curl from test-migrations to supabase:54321 failed"
          echo "==== Try psql connection from test-migrations container ===="
          docker compose -f docker-compose.yml -f .husky/docker-compose.ci.yml run --rm test-migrations bash -c 'PGPASSWORD=postgres psql -h supabase -U postgres -p 54322 -d postgres -c "\l"' || echo "psql from test-migrations to supabase:54322 failed"

      - name: Wait for Supabase to be healthy
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Waiting for Supabase to be healthy..."
          SUPABASE_CID=$(docker ps -qf "name=supabase")
          for i in {1..60}; do
            echo "[DEBUG] docker ps -qf name=supabase: $SUPABASE_CID"
            echo "[DEBUG] Attempting docker exec curl inside supabase container..."
            state=$(docker exec $SUPABASE_CID curl -sf http://localhost:54321/rest-admin/v1/ready && echo healthy || echo starting)
            echo "[DEBUG] Healthcheck state: $state"
            if [[ "$state" == "healthy" ]]; then
              echo "✅ Supabase ready after $((i*2)) seconds"
              break
            elif [[ "$state" == "starting" ]]; then
              echo "Supabase starting... ($((i*2))s elapsed)"
            fi
            [[ $i -eq 60 ]] && { echo "❌- Supabase not healthy after 2 minutes"; exit 1; }
            sleep 2
          done

      - name: Run migrations
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          CID=$(docker compose -f docker-compose.yml -f .husky/docker-compose.ci.yml run --build --no-deps -d test-migrations | tail -n1)
          docker logs -f "$CID"
          EXIT=$(docker wait "$CID")
          if [[ "$EXIT" -eq 0 ]]; then
            echo "✅- Migration checks passed"
          else
            echo "❌- Migration checks failed"
            exit 1
          fi

      - name: No relevant changes, skipping migration checks
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No relevant changes, skipping migration checks."
