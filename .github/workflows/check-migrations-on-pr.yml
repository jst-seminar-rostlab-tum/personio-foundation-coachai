name: Check Migrations on PR

on:
  pull_request:

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1Ô∏è‚É£  Static checks that don't need a database
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
jobs:
  pre-checks:
    name: Pre-migration checks
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect backend-related changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      # üö¶  Fail early if dev isn‚Äôt fully merged
      - name: Check if dev branch is merged
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          git fetch origin dev
          git fetch origin "$PR_BRANCH"
          if git merge-base --is-ancestor origin/dev origin/"$PR_BRANCH"; then
            echo "‚úÖ Dev branch is merged"
          else
            echo "‚ùå Dev branch is not fully merged into this branch"
            exit 1
          fi

      # üõ°  Guard against editing existing migration files
      - name: Check for modified dev migration files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          DEV_MIGRATIONS=$(git ls-tree -r --name-only origin/dev -- backend/alembic/versions/ backend/alembic/data/ | grep -E '\.py$|\.sql$' || true)
          if [[ -n "$DEV_MIGRATIONS" ]]; then
            MODIFIED=""
            for f in $DEV_MIGRATIONS; do
              if git ls-tree -r --name-only HEAD -- "$f" | grep -q .; then
                if ! git diff --quiet origin/dev HEAD -- "$f"; then
                  MODIFIED="$MODIFIED\n$f (modified)"
                fi
              else
                MODIFIED="$MODIFIED\n$f (deleted)"
              fi
            done
            if [[ -n "$MODIFIED" ]]; then
              echo "‚ùå Existing migration files from dev have been altered:"
              echo -e "$MODIFIED"
              exit 1
            fi
          fi
          echo "‚úÖ Migration files check passed"

      - name: No relevant changes ‚Äì skipping
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No backend-level changes; skipping migration pre-checks."

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2Ô∏è‚É£  Migration test job with a service DB
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  migrations:
    name: Check migrations
    runs-on: ubuntu-22.04
    needs: pre-checks

    # üöÄ  Postgres service starts in parallel with the runner VM
    services:
      db:
        image: supabase/postgres:17.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v4

      - name: Detect backend-related changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      - name: Install uv (fast pip replacement)
        if: steps.changed-files.outputs.any_changed == 'true'
        run: pipx install uv

      - name: Sync Python deps
        if: steps.changed-files.outputs.any_changed == 'true'
        run: uv sync
        working-directory: ./backend

      # üîê  Create supabase_admin role only when needed
      - name: Ensure supabase_admin role (CI only)
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          psql -h localhost -U postgres -d postgres -v ON_ERROR_STOP=1 -c "
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'supabase_admin') THEN
              CREATE ROLE supabase_admin SUPERUSER;
            END IF;
          END;
          \$\$;"

      # üèóÔ∏è  Run Alembic migrations against the freshly spun-up DB
      - name: Run migrations
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
        working-directory: ./backend
        run: |
          # Alembic should already be in your project‚Äôs dependencies; install if not:
          uv pip install alembic
          alembic upgrade head
          echo "‚úÖ Migration checks passed"

      - name: No relevant changes ‚Äì skipping
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No backend-level changes; skipping migration checks."
