name: Check Migrations on PR

on:
  pull_request:

jobs:
  pre-checks:
    # ... your pre-checks job remains the same, no changes needed ...
    name: Pre-migration checks
    runs-on: ubuntu-22.04
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for backend changes
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            backend/app/models/**
            backend/alembic/versions/**
            backend/alembic/data/**
            backend/app/data/**

      - name: Check if dev branch is merged
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          git fetch origin dev
          git fetch origin $PR_BRANCH
          echo "Checking if origin/dev is merged into $PR_BRANCH"

          if git merge-base --is-ancestor origin/dev origin/$PR_BRANCH; then
            echo "✅ Dev branch is merged"
          else
            echo "❌ Dev branch is not fully merged into this branch"
            echo "Please merge dev branch before proceeding"
            exit 1
          fi

      - name: Check for modified dev migration files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Checking for modifications to existing migration files from dev..."
          DEV_MIGRATIONS=$(git ls-tree -r --name-only origin/dev -- backend/alembic/versions/ backend/alembic/data/ | grep -E '\.py$|\.sql$' || true)
          if [[ -n "$DEV_MIGRATIONS" ]]; then
            MODIFIED_FILES=""
            for file in $DEV_MIGRATIONS; do
              if git ls-tree -r --name-only HEAD -- "$file" | grep -q .; then
                if ! git diff --quiet origin/dev HEAD -- "$file"; then
                  MODIFIED_FILES="$MODIFIED_FILES\n$file (modified)"
                fi
              else
                MODIFIED_FILES="$MODIFIED_FILES\n$file (deleted)"
              fi
            done
            if [[ -n "$MODIFIED_FILES" ]]; then
              echo "❌ Existing migration files from dev have been altered:"
              echo -e "$MODIFIED_FILES"
              echo "Migration files from dev branch should never be modified or deleted."
              echo "Revert changes and create new migration files instead."
              exit 1
            else
              echo "✅ No existing migration files from dev have been modified"
            fi
          else
            echo "✅ No migration files found on dev branch"
          fi

      - name: No relevant changes, skipping migration pre-checks
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No relevant changes, skipping migration pre-checks."

  migrations:
    name: Check migrations
    runs-on: ubuntu-22.04
    # This job will only run if the pre-checks job determined there were changes
    needs: pre-checks
    if: needs.pre-checks.outputs.any_changed == 'true'

    # Define Supabase as a service for this job
    services:
      supabase:
        image: supabase/supabase-dev:latest
        ports:
          - 54321:54321 # API
          - 54322:54322 # DB
        # GitHub Actions will wait for this healthcheck to pass before starting the steps
        healthcheck:
          test: ["CMD-SHELL", "curl -sf http://localhost:54321/rest/v1/"]
          interval: 5s
          timeout: 5s
          retries: 10

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        run: pipx install uv

      - name: Install dependencies
        run: uv sync
        working-directory: ./backend

      - name: Run migrations
        # The DATABASE_URL now points to localhost, as the service port is mapped to the host
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:54322/postgres
        run: |
          echo "✅ Supabase is healthy. Running migration checks..."
          # Assuming your test-migrations.sh script uses the DATABASE_URL env var
          # and contains the alembic commands.
          # We run it directly on the runner.
          cd backend
          alembic check

          # If you have a more complex script, you can run it like this:
          # bash ./.husky/test-migrations.sh